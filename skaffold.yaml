# yaml-language-server: $schema=https://raw.githubusercontent.com/GoogleContainerTools/skaffold/main/docs-v2/content/en/schemas/v4beta13.json
apiVersion: skaffold/v4beta13
kind: Config
metadata:
  name: prioritization-room
build:
  local:
    useBuildkit: true
    concurrency: 3
  artifacts:
    - image: tc-api-dev
      context: ./service/
      docker:
        dockerfile: Dockerfile.dev
        buildArgs:
          BUILDKIT_INLINE_CACHE: "1"
        cacheFrom:
          - "tc-api-dev:cache-main"
          - "tc-api-dev:cache"
      sync:
        manual:
          - src: "src/**/*.rs"
            dest: /usr/src/app
          - src: "src/**/*.toml"
            dest: /usr/src/app
          - src: "migrations/**"
            dest: /usr/src/app
          - src: "Cargo.toml"
            dest: /usr/src/app
          - src: "Cargo.lock"
            dest: /usr/src/app
    - image: postgres
      context: .
      docker:
        dockerfile: dockerfiles/Dockerfile.postgres
        buildArgs:
          BUILDKIT_INLINE_CACHE: "1"
        cacheFrom:
          - "postgres:cache-main"
          - "postgres:cache"
    - image: tc-ui-dev
      context: ./web/
      docker:
        dockerfile: Dockerfile.dev
        buildArgs:
          BUILDKIT_INLINE_CACHE: "1"
        cacheFrom:
          - "tc-ui-dev:cache-main"
          - "tc-ui-dev:cache"
deploy:
  helm:
    releases:
      - name: tc
        chartPath: kube/app
        valuesFiles:
          - kube/app/values.yaml
        version: 0.1.0
        setValueTemplates:
          image.repository: "{{.IMAGE_REPO_tc_api_dev}}"
          image.tag: "{{.IMAGE_TAG_tc_api_dev}}"
          frontend.image.repository: "{{.IMAGE_REPO_tc_ui_dev}}"
          frontend.image.tag: "{{.IMAGE_TAG_tc_ui_dev}}"
          postgres.image.repository: "{{.IMAGE_REPO_postgres}}"
          postgres.image.tag: "{{.IMAGE_TAG_postgres}}"
        setValues:
          serviceAccount:
            create: false

# Pre-deploy tests: run fast unit/API/UI tests only
test:
  - image: tc-api-dev
    custom:
      - command: IMAGE="$IMAGE" ./service/bin/skaffold-unit-tests.sh
  - image: tc-ui-dev
    custom:
      - command: >-
          docker run --rm -e CI=true "$IMAGE" /bin/sh -lc "cd /app && yarn test --watchAll=false && yarn playwright:test"

# Post-deploy verification: run integration tests against the live cluster
verify:
  - name: backend-integration
    container:
      name: backend-integration
      image: tc-api-dev
      command: ["/bin/bash"]
      args:
        - -lc
        - |
          set -euo pipefail
          cd /usr/src/app
          COVERAGE_DIR=/tmp/coverage \
          REPORTS_DIR=/tmp/reports \
          LCOV_FILE=backend-integration.lcov \
          REPORT_BASENAME=backend-integration \
          DATABASE_URL=postgres://postgres:postgres@postgres:5432/prioritization \
          TEST_TARGETS="integration_tests" \
          TEST_FLAGS="--test-threads=1 --nocapture -Z unstable-options --format json --report-time" \
            bin/run-coverage-tests.sh

          status=$?

          if [[ -f /tmp/reports/backend-integration-junit.xml ]]; then
            echo "BEGIN_BACKEND_INTEGRATION_JUNIT"
            base64 /tmp/reports/backend-integration-junit.xml
            echo "END_BACKEND_INTEGRATION_JUNIT"
          fi

          if [[ -f /tmp/coverage/backend-integration.lcov ]]; then
            echo "BEGIN_BACKEND_INTEGRATION_LCOV"
            base64 /tmp/coverage/backend-integration.lcov
            echo "END_BACKEND_INTEGRATION_LCOV"
          fi

          exit ${status}
    executionMode:
      kubernetesCluster: {}

# Ensure Postgres is reachable from localhost for developer workflows
portForward:
  - resourceType: service
    resourceName: postgres
    port: 5432
    localPort: 5432
  - resourceType: service
    resourceName: tc
    port: 80
    localPort: 8080
  - resourceType: deployment
    resourceName: tc-frontend
    port: 5173
    localPort: 5173

profiles:
  - name: dev
    build:
      local:
        push: false
    deploy:
      kubectl: {}
  - name: release
    build:
      artifacts:
        - image: tc-api-release
          context: ./service/
          docker:
            dockerfile: Dockerfile
        - image: tc-ui-release
          context: ./web/
          docker:
            dockerfile: Dockerfile
  - name: ci
    build:
      local:
        push: true
        useBuildkit: true
