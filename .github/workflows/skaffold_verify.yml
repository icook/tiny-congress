name: skaffold verify

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  skaffold_verify:
    name: Run skaffold verify
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      SKAFFOLD_DEFAULT_REPO: ghcr.io/${{ github.repository }}
      SKAFFOLD_PROFILE: ci
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx (for layer caching)
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Set up KinD cluster
        uses: helm/kind-action@v1.10.0
        with:
          version: v0.22.0
          kubectl_version: v1.30.0
          cluster_name: skaffold-ci

      - name: Install Skaffold
        run: |
          set -euo pipefail
          SKAFFOLD_VERSION=v2.16.1
          curl -fsSL -o skaffold https://storage.googleapis.com/skaffold/releases/${SKAFFOLD_VERSION}/skaffold-linux-amd64
          echo "Installing skaffold ${SKAFFOLD_VERSION}"
          sudo install skaffold /usr/local/bin/skaffold
          skaffold version


      - name: Show cluster info
        run: |
          kubectl version --client=true
          kubectl cluster-info
          kubectl get nodes -o wide

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute branch slug
        id: meta
        run: |
          ref="${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}"
          branch="${ref//[^a-zA-Z0-9_.-]/-}"
          branch="${branch,,}"
          echo "branch_slug=${branch}" >> "$GITHUB_OUTPUT"
          echo "BRANCH_NAME=${branch}" >> "$GITHUB_ENV"

      - name: Wait for prebuilt images
        env:
          REGISTRY: ghcr.io/${{ github.repository }}
        run: |
          set -euo pipefail
          images=(tc-api-dev tc-ui-dev postgres)
          max_attempts=60
          for img in "${images[@]}"; do
            ref="${REGISTRY}/${img}:${GITHUB_SHA}"
            echo "Waiting for ${ref} to be available"
            for attempt in $(seq 1 ${max_attempts}); do
              if docker manifest inspect "${ref}" >/dev/null 2>&1; then
                echo "Found ${ref}"
                break
              fi

              if [[ ${attempt} -eq ${max_attempts} ]]; then
                echo "Timed out waiting for ${ref}"
                exit 1
              fi

              echo "Still waiting for ${ref} (attempt ${attempt}/${max_attempts})"
              sleep 10
            done
          done

      - name: Configure registry access for KinD
        env:
          REGISTRY: ghcr.io
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          set -euo pipefail
          kubectl create secret docker-registry ghcr-cred \
            --namespace default \
            --docker-server="${REGISTRY}" \
            --docker-username="${GITHUB_ACTOR}" \
            --docker-password="${GITHUB_TOKEN}" \
            --dry-run=client -o yaml | kubectl apply -f -

          kubectl patch serviceaccount default \
            -n default \
            --type merge \
            -p '{"imagePullSecrets":[{"name":"ghcr-cred"}]}'

      - name: Prepare Skaffold image overrides
        id: images
        env:
          REGISTRY: ghcr.io/${{ github.repository }}
        run: |
          set -euo pipefail
          images=(tc-api-dev tc-ui-dev postgres)
          artifacts_file="${RUNNER_TEMP}/skaffold-artifacts.json"
          export REGISTRY
          export GITHUB_SHA
          export artifacts_file
          jq -n --arg registry "$REGISTRY" --arg sha "$GITHUB_SHA" '
            ["tc-api-dev", "tc-ui-dev", "postgres"]
            | {builds: map({imageName: ., tag: ($registry + "/" + . + ":" + $sha)})}
          ' > "$artifacts_file"
          echo "Wrote ${artifacts_file} with $(jq '.builds | length' "$artifacts_file") entries"
          echo "artifact_file=${artifacts_file}" >> "$GITHUB_OUTPUT"

      - name: Run Skaffold tests
        run: |
          set -euo pipefail
          skaffold test -p ${SKAFFOLD_PROFILE} --build-artifacts "${{ steps.images.outputs.artifact_file }}"

      - name: Deploy with Skaffold
        run: |
          set -euo pipefail
          skaffold deploy -p ${SKAFFOLD_PROFILE} --status-check=false --build-artifacts "${{ steps.images.outputs.artifact_file }}"

      - name: Wait for deployments
        run: |
          set -euo pipefail
          kubectl rollout status deployment/postgres --timeout=180s
          kubectl rollout status deployment/tc --timeout=180s
          kubectl rollout status deployment/tc-frontend --timeout=180s

      - name: Run Skaffold verify
        run: |
          set -euo pipefail
          skaffold verify -p ${SKAFFOLD_PROFILE} --build-artifacts "${{ steps.images.outputs.artifact_file }}"

      - name: Dump diagnostics on failure
        if: failure()
        run: |
          echo '--- Pods ---'
          kubectl get pods -A -o wide || true
          echo '--- Services ---'
          kubectl get svc -A || true
          echo '--- Events ---'
          kubectl get events -A --sort-by=.lastTimestamp || true
          echo '--- Helm Releases ---'
          kubectl get all -n default || true
